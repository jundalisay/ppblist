<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Elixir on Pantrypoints</title>
    <link>//localhost:1313/tags/elixir/</link>
    <description>Recent content in Elixir on Pantrypoints</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 24 Sep 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="//localhost:1313/tags/elixir/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>OTP</title>
      <link>//localhost:1313/docs/tech/otp/overview/</link>
      <pubDate>Tue, 22 Aug 2023 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/tech/otp/overview/</guid>
      <description>OTP is made up of:&#xA;Elxir Tool Set mix: a build tool application: sets the other independent Modules that will run Erlang OTP Features ETS : Erlang Term Storage mnesia : Database Management System crypto Behaviors GenServer: has client and server Supervisor: manages workers in a GenServer Protocols: allows polymorphism. An example of a bult-in protocol is String.Chars OTP Processes and State Management This allows functions to hold data independent of the function which is really held through the Genserver.</description>
    </item>
    <item>
      <title>Overview</title>
      <link>//localhost:1313/docs/tech/ecto/overview/</link>
      <pubDate>Tue, 22 Aug 2023 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/tech/ecto/overview/</guid>
      <description>Ecto Handles external data such as databases and JSON APIs&#xA;Repo Query Schema Changset Repo: communicates with external data source or database Has common methods:&#xA;get(): gets the record insert(): creates the record in that database update() delete() transaction() &amp;hellip; Phoenix uses Repo through:&#xA;config.exs as config :appname, Appname.Repo, &amp;hellip; repo.ex in /lib/appname/repo.ex Common methods Repo.count() Repo.update_all(&amp;#34;tablename&amp;#34;, set: [updated_at: Ecto.DateTime.utc]) </description>
    </item>
    <item>
      <title>Overview</title>
      <link>//localhost:1313/docs/tech/elixir/data-types/overview/</link>
      <pubDate>Tue, 22 Aug 2023 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/tech/elixir/data-types/overview/</guid>
      <description>Elixir uses dynamic types based on Erlang where the type is determined by the data entered in the variable.&#xA;Data Types Built-in types Atom - literal constants with a name (true, false, and nil are atoms) Float - numbers with floating point precision Function - a reference to code chunk, created with the fn/1 special form Integer - whole numbers (not fractions) List - collections of a variable number of elements (linked lists) Map - collections of key-value pairs Process - light-weight threads of execution Port - mechanisms to interact with the external world Tuple - collections of a fixed number of elements Data types without a module Bitstring - a sequence of bits, created with Kernel.</description>
    </item>
    <item>
      <title>Overview</title>
      <link>//localhost:1313/docs/tech/elixir/overview/</link>
      <pubDate>Tue, 22 Aug 2023 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/tech/elixir/overview/</guid>
      <description>Data types Built-in types&#xA;Lists Maps Tuples Data types without a module&#xA;Other Data types&#xA;Enum Behaviours: Modules that are publicly-available APIs GenServer (part of OTP) Supervisor (part of OTP) Protocols Naming Syntax Description _ unused variable ! for times when you want the error details from Elixir directly. Having no ! lets your write the error manually ? check if true or false is_something/1 checks if true or false for guard clauses function/1 Arity is the number of arguments that a function takes.</description>
    </item>
    <item>
      <title>Alias, Import, Require, Use</title>
      <link>//localhost:1313/docs/tech/elixir/alias/</link>
      <pubDate>Tue, 22 Aug 2023 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/tech/elixir/alias/</guid>
      <description>Reuse Directives: alias, require, import, use Directive CookingCourse.CookingMethod.fry/0 Notes alias as Cook Cook.fry Just a shortcut import as CookingCourse.CookingMethod fry Allows you to inject functions from another Module inside the current Module. Can conflict if imported Module has same methods unless only: [method: 1] use CookingCourse CookingCourse.fry(..) Allows you to inject functions, aliases, imports and uses from another Module inside the current Module Alias alias shortens the names of long dependent functions so you can reference them with a shorter name</description>
    </item>
    <item>
      <title>Anonymous functions</title>
      <link>//localhost:1313/docs/tech/elixir/anonymous/</link>
      <pubDate>Tue, 22 Aug 2023 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/tech/elixir/anonymous/</guid>
      <description>These store and pass executable functions around as if it was an integer or a string. They start with fn and end with end&#xA;Setting the anonymous function variable_that_holds_the_function = fn variable1, variable2, variable3 -&amp;gt; variable1 + variable2 + variable3 end&#xA;with Capture Operator &amp;amp; as Shortcut&#xA;variable_that_holds_the_function = &amp;amp;(&amp;amp;variable1 + &amp;amp;variable2 + &amp;amp;variable3)&#xA;def adder(n), do: &amp;amp;(&amp;amp;1 + n) adder = Calc.adder(6) # This is n assert adder.(9) === 15 # This is &amp;amp;1 Calling the anonymous function variable_that_holds_the_function.</description>
    </item>
    <item>
      <title>Control Flow</title>
      <link>//localhost:1313/docs/tech/elixir/control-flow/</link>
      <pubDate>Tue, 22 Aug 2023 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/tech/elixir/control-flow/</guid>
      <description>Guard: when Executes the function when the conditions are met&#xA;def function_name(input) when condition1 do end def function_name(input) when condition2 do end If if (condition, do: this, else: that) if(condition, [do: this, else: that]) if(condition, [{:do, this}, {:else, that}]) if true do this else that end if(true, do: (this), else: (that)) falsey = false or nil&#xA;truthy = everything that is not false or nil&#xA;Case Focuses on simple patterns</description>
    </item>
    <item>
      <title>DateTime</title>
      <link>//localhost:1313/docs/tech/elixir/datetime/</link>
      <pubDate>Tue, 22 Aug 2023 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/tech/elixir/datetime/</guid>
      <description>DateTime Module Functions The DateTime module contains functions for timezone aware dates and times.&#xA;Here are a few common functions to get you started.&#xA;Function Description add/4 Add time to an existing DateTime struct compare/2 Compare two DateTime structs to see if one is before, after, or the same as another diff/3 Determine the time between two DateTime structs new/4 Create a new DateTime struct and return an {:ok, datetime} tuple new!</description>
    </item>
    <item>
      <title>ExUnit</title>
      <link>//localhost:1313/docs/tech/elixir/testing/exunit/</link>
      <pubDate>Tue, 22 Aug 2023 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/tech/elixir/testing/exunit/</guid>
      <description>Doc Module The documentation module is also a test. This leads to Doctest fail or success.&#xA;How to Create Tests Create a file as file_test.exs&#xA;Write macros:&#xA;describe &amp;#34;App.function_name/1&amp;#34; do test &amp;#34;what I want to test&amp;#34; do assert App.function_name(1) == 1 end end How to Run Tests Run all Tests&#xA;mix test Run a specific test based on its row in the file&#xA;mix test test/app_test.exs:row_number ExUnit ExUnit.Case &amp;ndash; provides helpers</description>
    </item>
    <item>
      <title>IEX</title>
      <link>//localhost:1313/docs/tech/elixir/iex/</link>
      <pubDate>Tue, 22 Aug 2023 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/tech/elixir/iex/</guid>
      <description>Have autocomplete in Windows:iex --werl&#xA;i something get info about something&#xA;h something get help about something&#xA;How to get out of multiline: type &amp;quot;&amp;quot;&amp;quot;&amp;quot; iex(1)&amp;gt; {a ...(1)&amp;gt; ...(1)&amp;gt; &amp;#34;&amp;#34;&amp;#34;&amp;#34; .. iex(1)&amp;gt; Compile the Elixir app iex -S mix iex&amp;gt; c(lib/app.ex) Recompile recompile() Reveal Module info ModuleName.module_info(:method)&#xA;`</description>
    </item>
    <item>
      <title>Installation</title>
      <link>//localhost:1313/docs/tech/elixir/install/</link>
      <pubDate>Tue, 22 Aug 2023 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/tech/elixir/install/</guid>
      <description>Install ASDF asdf installs into ~/.asdf dir:&#xA;git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.11.1 Add to ~/.bashrc:&#xA;. &amp;#34;$HOME/.asdf/asdf.sh&amp;#34; # to be able to type asdf . &amp;#34;$HOME/.asdf/completions/asdf.bash&amp;#34; # for autocompletion Use ASDF to install Erlang asdf plugin-add erlang https://github.com/asdf-vm/asdf-erlang.git # adding erlang asdf plugin sudo apt-get -y install build-essential autoconf m4 libncurses5-dev libwxgtk3.0-gtk3-dev libwxgtk-webview3.0-gtk3-dev libgl1-mesa-dev libglu1-mesa-dev libpng-dev libssh-dev unixodbc-dev xsltproc fop libxml2-utils libncurses-dev openjdk-11-jdk asdf list-all erlang asdf install erlang 25.</description>
    </item>
    <item>
      <title>Lists</title>
      <link>//localhost:1313/docs/tech/elixir/data-types/list/</link>
      <pubDate>Tue, 22 Aug 2023 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/tech/elixir/data-types/list/</guid>
      <description>[Lists] are for non-fixed number of elements.&#xA;[3.14, :pie, &amp;#34;Apple&amp;#34;] Linked Lists Elixir lists are linked lists which are not &amp;ldquo;arrays&amp;rdquo; arranged by index where you can get the first element by list[0]&#xA;Instead, linked lists allows fast prepending of data but slower appending as the process has to go through the list.&#xA;This is because data in Elixir is immutable and sit in its own process which maniuplates it via functions.</description>
    </item>
    <item>
      <title>Macros</title>
      <link>//localhost:1313/docs/tech/elixir/macros/</link>
      <pubDate>Tue, 22 Aug 2023 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/tech/elixir/macros/</guid>
      <description>Elixir is based on functions in functions in functions.&#xA;Functions have a complicated syntax. To simplify them, the functions are organized into &amp;ldquo;macros&amp;rdquo; by defmacro.&#xA;Macros are evaluated at compile time and must return quote expression.&#xA;These are then used to define constants and DSLs. But macros are really just reused functions.&#xA;Quote quote substitutes {function, metadata, arguments} usually {Expression, Modules, Nested Expressions}&#xA;quote translates whatever is in it as AST which has precedence.</description>
    </item>
    <item>
      <title>Meta-Programming and the Abstract Syntax Tree</title>
      <link>//localhost:1313/docs/tech/elixir/meta/</link>
      <pubDate>Fri, 22 Sep 2023 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/tech/elixir/meta/</guid>
      <description>AST is a data structure composed of the following elements:&#xA;Quote Literals :atom 1nteger f.loat &amp;ldquo;string&amp;rdquo; [&amp;ldquo;l&amp;rdquo;, &amp;ldquo;i&amp;rdquo;, &amp;ldquo;s&amp;rdquo;, &amp;ldquo;t&amp;rdquo;] {&amp;ldquo;2-element&amp;rdquo;, :tuple} 3-Element Tuples The building block of an Elixir program is a tuple with three elements&#xA;variables {name, meta, context} calls {function, context/meta, arguments} &amp;ldquo;Calls&amp;rdquo; such as sum(1, 2, 3) create ASTs such as {:sum, meta, [1, 2, 3]}.</description>
    </item>
    <item>
      <title>Map Functions</title>
      <link>//localhost:1313/docs/tech/elixir/data-types/maps/</link>
      <pubDate>Fri, 22 Sep 2023 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/tech/elixir/data-types/maps/</guid>
      <description>Map Functions Map.get(map, key, default_value) Gets the value of a key in map.&#xA;If key is present, its value is returned. Otherwise, default is returned. If default is not provided, nil is used. Map.get(%{}, :a) nil # because a is not defined Map.get(%{a: 1}, :a) 1 # because a is 1 Map.get(%{a: 1}, :b, 3) 3 # because b is nowhere and 3 is the default output Map.put(map, key, value) Puts the value under key in map.</description>
    </item>
    <item>
      <title>Maps</title>
      <link>//localhost:1313/docs/tech/elixir/data-types/map/</link>
      <pubDate>Fri, 22 Sep 2023 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/tech/elixir/data-types/map/</guid>
      <description>These are key-value stores.&#xA;Keyword lists allow only atom-keys and are ordered.&#xA;But Maps do not.&#xA;map = %{ph -&amp;gt; manila, us -&amp;gt; wash} Setting&#xA;m = %{a: 1} m = %{a =&amp;gt; 1} # the =&amp;gt; goes deeper %{a: 1} == %{:a =&amp;gt; 1} map = %{:atom =&amp;gt; &amp;#34;string&amp;#34;, &amp;#34;string&amp;#34; =&amp;gt; &amp;#34;string&amp;#34;} mapshortcut = %{atom: &amp;#34;string&amp;#34;, atom2: &amp;#34;string&amp;#34;} # binding to variable %{&amp;#34;string&amp;#34; =&amp;gt; string} defstruct [:name, :age] attributes_map = %{name: &amp;#34;Lam&amp;#34;, age: 20} struct() Calling</description>
    </item>
    <item>
      <title>Operators</title>
      <link>//localhost:1313/docs/tech/elixir/operators/</link>
      <pubDate>Tue, 22 Aug 2023 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/tech/elixir/operators/</guid>
      <description>Operators are non-qualified calls.&#xA;`.&amp;rsquo; is an operator.&#xA;Elixir operators always return a float.&#xA;Infix Expression 1 + 1&#xA;Prefix Expression +(1, 1)&#xA;Postfix Expression (1, 1)+&#xA;Operator Name What it does Precedence @ module attribute defines compile constants too Unary . dot Left ^ pin prevents the variable from changing = match &amp;amp; capture :: type ! ^ not ~~~ strict and relaxed boolean &amp;ldquo;not&amp;rdquo; Unary . + - positive/negative Unary / * + - division, multiplication, etc arithmetic Left &amp;lt;&amp;gt; ++ &amp;ndash; +++ &amp;mdash; .</description>
    </item>
    <item>
      <title>Pattern Matching</title>
      <link>//localhost:1313/docs/tech/elixir/pattern-matching/</link>
      <pubDate>Tue, 22 Aug 2023 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/tech/elixir/pattern-matching/</guid>
      <description>Pattern Matching Steps:&#xA;Evaluate the contents Match them a = 1 # if a matches 1 then ok. Since a has nothing then 1 is assigned to it [a, a] = [&amp;#34;z&amp;#34;, &amp;#34;z&amp;#34;] [a, a] = [&amp;#34;x&amp;#34;, &amp;#34;z&amp;#34;] # error [&amp;#34;x&amp;#34;, &amp;#34;x&amp;#34;] = [a, a] # error because a is &amp;#34;z&amp;#34;. This exposes that = is really key = value [^a, ^a] = [&amp;#34;x&amp;#34;, &amp;#34;x&amp;#34;] # error because pin operator pins the value of a to &amp;#34;z&amp;#34; which does not match &amp;#34;x&amp;#34; [a, a] = [&amp;#34;x&amp;#34;, &amp;#34;x&amp;#34;] # works because the pattern is matches even if the &amp;#34;x&amp;#34; values are new data = %{ name: &amp;#34;Dave&amp;#34;, state: &amp;#34;TX&amp;#34;, likes: &amp;#34;Elixir&amp;#34; } for key &amp;lt;- [ :name, :likes ] do %{ ^key =&amp;gt; value } = data value end </description>
    </item>
    <item>
      <title>Processes</title>
      <link>//localhost:1313/docs/tech/elixir/process/</link>
      <pubDate>Tue, 22 Aug 2023 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/tech/elixir/process/</guid>
      <description>A process is an isolated entity where code execution happens.&#xA;Stack: keeps local variables. Heap: keeps larger structures. Mailbox: stores messages sent from other processes. Process Control Block: keeps track of the state of the process. Functions:&#xA;Kernel.spawn/1 Kernel.spawn/3 Kernel.spawn_link/1 Kernel.spawn_link/3 Kernel.spawn_monitor/1 Kernel.spawn_monitor/3 Kernel.self/0 Kernel.send/2 Process lifecycle is:&#xA;Process creation spawn&#xA;function = IO.puts &amp;#34;Process #{inspect(self())}.&amp;#34; pid = spawn(function) Process.alive?(pid) false Code execution send&#xA;Process termination </description>
    </item>
    <item>
      <title>Protocols</title>
      <link>//localhost:1313/docs/tech/elixir/protocols/</link>
      <pubDate>Tue, 22 Aug 2023 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/tech/elixir/protocols/</guid>
      <description>Protocols add polymorphic dispatch to Elixir. They are contracts implementable by data types.&#xA;The standard protocols are:&#xA;Protocol Description Collectable collects data into a data type Enumerable handles collections in Elixir, as Enum module for eager functions and Stream module for lazy functions Inspect converts data types into their programming language representation List.Chars converts data types to their outside world representation as charlists (non-programming based) String.Chars converts data types to their outside world representation as strings (non-programming based) </description>
    </item>
    <item>
      <title>Regex</title>
      <link>//localhost:1313/docs/tech/elixir/regex/</link>
      <pubDate>Sun, 24 Sep 2023 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/tech/elixir/regex/</guid>
      <description>The ~r sigil creates Regex. These are used to find matching patterns in a string.&#xA;Regex Functions Function Description Regex.scan/3 Lists the matches Regex.run/3 Runs regex until the first match Regex.replace/4 Replaces all matches Regex.split/3 Split the string on matches Regex.match?/2 Does the string have the regex? .scan/3 Description Example 1 Sigil ~r 2 Regex /l/ 3 Data `&amp;ldquo;hello&amp;rdquo;`` Regex.scan(~r/l/, &amp;#34;hello&amp;#34;) # [[&amp;#34;l&amp;#34;], [&amp;#34;l&amp;#34;]] Regex.scan(~r/\d/, &amp;#34;h3ll0&amp;#34;) # [[&amp;#34;3&amp;#34;], [&amp;#34;0&amp;#34;]] Elixir uses the PCRE standard (Perl Compatible Regular Expressions).</description>
    </item>
    <item>
      <title>Sigils</title>
      <link>//localhost:1313/docs/tech/elixir/sigils/</link>
      <pubDate>Tue, 22 Aug 2023 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/tech/elixir/sigils/</guid>
      <description>Sigils A sigil is a tilde with a character.&#xA;Sigil Generates.. ~C ..a character list with no escaping nor interpolation ~c ..a character list with escaping and interpolation ~R .. a regular expression with no escaping or interpolation ~r .. a regular expression with escaping and interpolation ~S .. a string with no escaping or interpolation ~s .. a string with escaping and interpolation ~W .. a word list with no escaping or interpolation ~w .</description>
    </item>
    <item>
      <title>Strings</title>
      <link>//localhost:1313/docs/tech/elixir/data-types/strings/</link>
      <pubDate>Tue, 22 Aug 2023 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/tech/elixir/data-types/strings/</guid>
      <description>Elixir strings are a sequence of bytes.&#xA;string = &amp;lt;&amp;lt;104,101,108,108,111&amp;gt;&amp;gt; &amp;#34;hello&amp;#34; &amp;lt;&amp;lt; &amp;gt;&amp;gt; tells the compiler that its elements are bytes.&#xA;Charlists Elixir &amp;ldquo;strings&amp;rdquo; are represented with a sequence of bytes, not by an array of characters.&#xA;In Elixir &amp;lsquo;char lists&amp;rsquo;, each value is the Unicode code point.&#xA;You can get a character’s code point by using ?&#xA;Charlist support is mainly included because it is required for some Erlang modules.</description>
    </item>
    <item>
      <title>Structs</title>
      <link>//localhost:1313/docs/tech/elixir/data-types/struct/</link>
      <pubDate>Tue, 22 Aug 2023 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/tech/elixir/data-types/struct/</guid>
      <description>Structs struct(Struct_name, map) inserts a map into a Struct&#xA;Updating structs # via struct a = %Computer{id: 1, kind: &amp;#34;laptop&amp;#34;} struct(a, kind: &amp;#34;server&amp;#34;) # via | cons a = %{a | kind: &amp;#34;server&amp;#34;} put_in updates a struct</description>
    </item>
    <item>
      <title>Type Specs</title>
      <link>//localhost:1313/docs/tech/elixir/specs/</link>
      <pubDate>Tue, 22 Aug 2023 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/tech/elixir/specs/</guid>
      <description>Used to document types, specs, behaviors&#xA;input :: return_value&#xA;Example:&#xA;@type year :: integer @spec age(year) :: integer @type error_map :: %{message: String.t, line: integer} </description>
    </item>
    <item>
      <title>Supervisors</title>
      <link>//localhost:1313/docs/tech/otp/supervisors/</link>
      <pubDate>Tue, 22 Aug 2023 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/tech/otp/supervisors/</guid>
      <description>Elixir Supervisors restarts child processes when they fail Strategies :one_for_one If a child terminates, only that process is restarted.&#xA;:one_for_all If a child terminates, all other children are terminated. Then all children (including the terminated one) are restarted.&#xA;:rest_for_one If a child terminates, the terminated child and the rest of the children started after it, are terminated and restarted.</description>
    </item>
  </channel>
</rss>
