<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Elixir Ecto on Pantrypoints</title>
    <link>//localhost:1313/docs/tech/ecto/</link>
    <description>Recent content in Elixir Ecto on Pantrypoints</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 22 Aug 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="//localhost:1313/docs/tech/ecto/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Overview</title>
      <link>//localhost:1313/docs/tech/ecto/overview/</link>
      <pubDate>Tue, 22 Aug 2023 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/tech/ecto/overview/</guid>
      <description>Ecto Handles external data such as databases and JSON APIs&#xA;Repo Query Schema Changset Repo: communicates with external data source or database Has common methods:&#xA;get(): gets the record insert(): creates the record in that database update() delete() transaction() &amp;hellip; Phoenix uses Repo through:&#xA;config.exs as config :appname, Appname.Repo, &amp;hellip; repo.ex in /lib/appname/repo.ex Common methods Repo.count() Repo.update_all(&amp;#34;tablename&amp;#34;, set: [updated_at: Ecto.DateTime.utc]) </description>
    </item>
    <item>
      <title>Ecto Queries</title>
      <link>//localhost:1313/docs/tech/ecto/queries/</link>
      <pubDate>Tue, 15 Feb 2022 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/tech/ecto/queries/</guid>
      <description>Repo Repo has a limited number of queries.&#xA;Return a single record, and raise an error if more than one record is returned Repo.one Check for existence Repo.exists? Get the length of an model length(@posts) Get the count Repo.one(from p in Post, select: count(&amp;#34;*&amp;#34;)) Repo.aggregate(Post, :count, :id) Get by something Get a record by id Pipe&#xA;User |&amp;gt; Repo.get(1) User |&amp;gt; Repo.get!(1) No Pipe&#xA;Repo.get(User, 1) Repo.get!(User, 1) Get first or last record Pipe</description>
    </item>
    <item>
      <title>Ecto Changeset</title>
      <link>//localhost:1313/docs/tech/ecto/changeset/</link>
      <pubDate>Fri, 15 Apr 2022 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/tech/ecto/changeset/</guid>
      <description>Changsets allow manipulation of the data to match Schema so that it can be passed to the Repo&#xA;Cast: filters the parameters with the attributes to be accepted into the changeset Validate: validates those filtered attributes. This includes constraints which are set on the database level Schema&amp;rsquo;d Changeset Schemas are a useful shortcut used in querying so you don&amp;rsquo;t have to specify all the attributes&#xA;Defining def changeset(schemaname, attrs) do schemaname |&amp;gt; cast(attrs, [:key1, :key2,.</description>
    </item>
    <item>
      <title>Ecto Commands</title>
      <link>//localhost:1313/docs/tech/ecto/commands/</link>
      <pubDate>Fri, 15 Apr 2022 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/tech/ecto/commands/</guid>
      <description>post = MyRepo.get!(Post, 42) post = Ecto.Changeset.change post, title: &amp;#34;New title&amp;#34; case MyRepo.update post do {:ok, struct} -&amp;gt; # Updated with success {:error, changeset} -&amp;gt; # Something went wrong end Repo.get_by(Chat, id: chat_id) |&amp;gt; Ecto.Changeset.change(%{visible: true}) |&amp;gt; Repo.update() </description>
    </item>
  </channel>
</rss>
