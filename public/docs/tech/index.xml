<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tech Docs on Pantrypoints</title>
    <link>//localhost:1313/docs/tech/</link>
    <description>Recent content in Tech Docs on Pantrypoints</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 01 Jan 0001 00:00:00 +0000</lastBuildDate>
    <atom:link href="//localhost:1313/docs/tech/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>//localhost:1313/docs/tech/seo/seo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/tech/seo/seo/</guid>
      <description></description>
    </item>
    <item>
      <title>Astro Syntax</title>
      <link>//localhost:1313/docs/tech/astro/astro-syntax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/tech/astro/astro-syntax/</guid>
      <description>code fence: ---&#xA;dynamics is in code fence reactive is not&#xA;{local variable} ${local variable}&#xA;&amp;lt;MyComponent templateLiteralNameAttribute={`MyNameIs${name}`} /&amp;gt; HTML attributes will be converted to strings&#xA;&amp;lt;!-- ❌ This doesn&amp;#39;t work! ❌ --&amp;gt; &amp;lt;button onClick={handleClick}&amp;gt;click me!&amp;lt;/button&amp;gt; Instead, use a client-side script to add the event handler, like you would in vanilla JavaScript:&#xA;&amp;lt;button id=&amp;#34;button&amp;#34;&amp;gt;Click Me&amp;lt;/button&amp;gt; &amp;lt;script&amp;gt; function handleClick () { console.log(&amp;#34;button clicked!&amp;#34;); } document.getElementById(&amp;#34;button&amp;#34;).addEventListener(&amp;#34;click&amp;#34;, handleClick); &amp;lt;/script&amp;gt; Local variables can be used in JSX-like functions to produce dynamically-generated HTML elements:</description>
    </item>
  </channel>
</rss>
